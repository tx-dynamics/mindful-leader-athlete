#!/usr/bin/env node

var config = require("config");
var mongoose = require("mongoose");
let winston = require("winston");
const moment = require("moment");
/**
 * Module dependencies.
 */

var app = require("../app");
var debug = require("debug")("habbit-tracking-app:server");
var http = require("http");
const userService = require("../models/user/userService");
const messageService = require("../models/message/messageService");
const socketIo = require("socket.io");
const cors = require("cors");
/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || "5005");
app.set("port", port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);
const io = socketIo(server, {
  cors: {
    origin: "http://localhost:3000",
    credentials: true,
  },
});

app.use(cors());
/**
 * Listen on provided port, on all network interfaces.
 */

io.on("connect", (socket) => {
  socket.on("join", ({ userId, roomId }, callback) => {
    console.log("User: ", userId, "Room: ", roomId);
    //const { error, user } = addUser({ id: socket.id, name, room });

    //if (error) return callback(error);
    socket.roomId = roomId;
    socket.userId = userId;
    socket.join(roomId);
    console.log("Joined", socket.roomId);
    // socket.emit("message", {
    //   user: "admin",
    //   text: `${user.name}, welcome to room ${user.room}.`,
    // });
    // socket.broadcast
    //   .to(roomId)
    //   .emit("message", { user: "admin", text: `Ali has joined!` });

    // io.to(user.room).emit("roomData", {
    //   room: user.room,
    //   users: getUsersInRoom(user.room),
    // });

    callback();
  });

  socket.on("sendMessage", async (message, callback) => {
    console.log(
      "room id: ",
      socket.roomId,
      "Message: ",
      message,
      "User: ",
      socket.userId
    );

    const user = await userService.findOne({
      _id: socket.userId,
      $or: [{ company: socket.roomId }, { department: socket.roomId }],
    });
    console.log("User: ", user);

    var currentDate = moment().format("YYYY-MM-DD");
    var currentTime = moment().format("HH:mm:ss");
    const msg = await messageService.save({
      message,
      roomId: socket.roomId,
      user: user._id,
      userName: user.fullName,
      date: currentDate,
      time: currentTime,
    });
    console.log("Msg: ", msg);
    // const user = getUser(socket.id);
    //userService.findOne({ company: socket.roomId });
    // const user = {
    //   name: "Uqba",
    //   text: "Here we go",
    // };

    io.to(socket.roomId).emit("message", msg);
    console.log("End");
    callback();
  });

  socket.on("disconnect", () => {
    console.log("DisConnected");
  });
});

server.listen(port);
server.on("error", onError);
server.on("listening", onListening);
// config.get("clientUrl")
// const io = require("socket.io")(server, {
//   cors: {
//     origin: "http://localhost:3000",
//     credentials: true,
//   },
// });

// io.use(async (socket, next) => {
//   try {
//     const token = socket.handshake.query.userId;
//     console.log("Token: ", token);
//     // const payload = await jwt.verify(token, process.env.SECRET);
//     // console.log("payload: ", payload);
//     socket.userId = token;
//     next();
//   } catch (err) {
//     console.log("ERROR: " + err);
//   }
// });

// io.on("connection", (socket) => {
//   console.log("Connected: " + socket.userId);

//   socket.on("disconnect", () => {
//     console.log("DisConnected: " + socket.userId);
//   });

//   socket.on("joinRoom", ({ chatroomId }) => {
//     socket.join(chatroomId);
//     console.log("A user joined the chat room: " + chatroomId);
//   });

//   socket.on("leaveRoom", ({ chatroomId }) => {
//     socket.leave(chatroomId);
//     console.log("A user left the chat room: " + chatroomId);
//   });

//   socket.on("chatroomMessage", async ({ chatroomId, message }) => {
//     if (message.trim().length > 0) {
//       console.log(
//         "USER ID",
//         socket.userId,
//         "Message: ",
//         message,
//         "CHatroomID",
//         chatroomId
//       );
//       // const user = await userService.findOne({ _id: socket.userId });
//       // console.log("User: ", user);
//       // await messageService.save({
//       //   chatroom: chatroomId,
//       //   user: socket.userId,
//       //   message,
//       // });

//       console.log("UsSaved");
//       io.to(chatroomId).emit("newMessage", {
//         message,
//         // name: user.name,
//         // userId: socket.userId,
//       });

//       console.log("Sent");
//       // await newMessage.save();
//       // await messageService.save({
//       //   chatroom: chatroomId,
//       //   user: socket.userId,
//       //   message,
//       // });
//     }
//   });
// });

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== "listen") {
    throw error;
  }

  var bind = typeof port === "string" ? "Pipe " + port : "Port " + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case "EACCES":
      console.error(bind + " requires elevated privileges");
      process.exit(1);
      break;
    case "EADDRINUSE":
      console.error(bind + " is already in use");
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === "string" ? "pipe " + addr : "port " + addr.port;
  debug("Listening on " + bind);

  const db = config.get("db");
  mongoose
    .connect(db, {
      useNewUrlParser: true,
      useUnifiedTopology: true,
      socketTimeoutMS: 0,
      useCreateIndex: true,
    })
    .then(() => {
      console.log(`Connected to db...`);
      // require("../seeder-utils")();
    })
    .catch((err) => {
      console.log(err);
    });
}
